import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.Scanner;

public class OutputToTextFile {

	public static void AddShipManually() {

		Driver.InstallSpecificShip("Federation", "CC");
//		System.out.println("currentGameYard.numShips: " + Driver.currentGameYard.numShips);
		int newShipNum = Driver.currentGameYard.numShips - 1;
//		System.out.println("newShipNum: " + newShipNum);
		
		Starship currentShip = Driver.currentGameYard.list[newShipNum];

		System.out.print("Race: ");
		currentShip.race = Driver.keyboard.nextLine();
		System.out.print("Ship Type: ");
		currentShip.shipType = Driver.keyboard.nextLine().toUpperCase();
		currentShip.name = currentShip.race + "-" + currentShip.shipType;
		System.out.print("Crew Units: ");
		currentShip.crewUnits = Driver.keyboard.nextLine();
		System.out.print("Boarding Parties: ");
		currentShip.boardingParties = Driver.keyboard.nextLine();
		System.out.print("BPV: ");
		currentShip.BPV = Driver.keyboard.nextLine();
		System.out.print("Break Down: ");
		currentShip.breakDown = Driver.keyboard.nextLine();
		System.out.print("Move Cost: ");
		currentShip.moveCost = Driver.keyboard.nextLine();
		System.out.print("Spare Shuttles: ");
		currentShip.spareShuttles = Driver.keyboard.nextLine();
		System.out.print("Size Class: ");
		currentShip.sizeClass = Driver.keyboard.nextLine();
		System.out.print("Turn Mode: ");
		currentShip.turnMode = Driver.keyboard.nextLine().toUpperCase();
		System.out.print("Rule Number: ");
		currentShip.ruleNum = Driver.keyboard.nextLine();
		System.out.print("Year in Service: ");
		currentShip.yearInService = Driver.keyboard.nextLine();
//		System.out.print("Dock Points:");
//		System.out.print("Explosion Strength:");

		System.out.println();
		System.out.println("Indicate how many boxes exist on the " + currentShip.name + " SSD for the following systems:");
		System.out.println();
		System.out.println("SYSTEM NAME");
				
		for (int numPart = 0; numPart <= 24; numPart++) {  //  Allow changes to all systems except Damage Control, Sensor, Scanner, Excess Damage
			if (currentShip.ssd[numPart].name == "Flag Bridge") {
				System.out.println("---------------------------------------------------------");
				System.out.println("Flag Bridge = Security, Web, Displacement Device");
				System.out.println("---------------------------------------------------------");
			} else if (currentShip.ssd[numPart].name == "Torpedo") {
				System.out.println("---------------------------------------------------------");
				System.out.println("Torpedo = Photon Torpedo, Disruptor Bolt, Plasma Torpedo,");
				System.out.println("          SFG, Fusion Beam, Tractor-Repulsor Beam");
				System.out.println("---------------------------------------------------------");
			} else if (currentShip.ssd[numPart].name == "Drone") {
				System.out.println("---------------------------------------------------------");
				System.out.println("Drone = ADD, ESG, Hellbore, Plasmatic Pulsars,");
				System.out.println("        Power Absorbers");
				System.out.println("---------------------------------------------------------");
			} else if (currentShip.ssd[numPart].name == "Shuttle") {
				System.out.println("---------------------------------------------------------");
				System.out.println("Shuttle = Fighter, Mine Andormedan Hangar");
				System.out.println("---------------------------------------------------------");
			} else if (currentShip.ssd[numPart].name == "Cargo") {
				System.out.println("---------------------------------------------------------");
				System.out.println("Cargo = Repair, Mine Rack");
				System.out.println("---------------------------------------------------------");
			} else if (currentShip.ssd[numPart].name.contains("Hull")) {
				System.out.println("---------------------------------------------------------");
				System.out.println("Front/Aft Hull = Repair");
				System.out.println("---------------------------------------------------------");
			}
			System.out.print(currentShip.ssd[numPart].name + ": ");
			currentShip.ssd[numPart].numOfThisPart = Driver.getNumberNoCancel(0, 100);
			currentShip.ssd[numPart].remaining = currentShip.ssd[numPart].numOfThisPart;
		}
		
		System.out.println();
		System.out.println("Enter Damage Control Numbers:");
		for (int i = 0; i < currentShip.ssd[21].numOfThisPart; i++) {
			System.out.print("Box " + (i+1) + ": ");
			currentShip.damConNums[i] = Driver.getNumber(0,10);
		}
		System.out.println();
		System.out.println("Enter Sensor Numbers:");
		for (int i = 0; i < currentShip.ssd[22].numOfThisPart; i++) {
			System.out.print("Box " + (i+1) + ": ");
			currentShip.sensorNums[i] = Driver.getNumber(0,10);
		}
		System.out.println();
		System.out.println("Enter Scanner Numbers:");
		for (int i = 0; i < currentShip.ssd[23].numOfThisPart; i++) {
			System.out.print("Box " + (i+1) + ": ");
			currentShip.scannerNums[i] = Driver.getNumber(0,10);
		}
		
		boolean cont = true;
		while(cont) {
			System.out.println("=======================================================================");
			System.out.println("Race: " + currentShip.race);
			System.out.println("Ship Type: " + currentShip.shipType);
			System.out.println("Ship Name: " + currentShip.name);
			System.out.println("Crew Units: " + currentShip.crewUnits);
			System.out.println("Boarding Parties: " + currentShip.boardingParties);
			System.out.println("BPV: " + currentShip.BPV);
			System.out.println("Break Down: " + currentShip.breakDown);
			System.out.println("Move Cost: " + currentShip.moveCost);
			System.out.println("Spare Shuttles: " + currentShip.spareShuttles);
			System.out.println("Size Class: " + currentShip.sizeClass);
			System.out.println("Turn Mode: " + currentShip.turnMode);
			System.out.println("Rule Number: " + currentShip.ruleNum);
			System.out.println("Year in Service: " + currentShip.yearInService);
			System.out.println();
			for (int numPart = 0; numPart <= 24; numPart++) {
				String extraSpace = ShipSetup.getExtraSpaces(numPart+1, 2);
				System.out.print(extraSpace + (numPart+1) + ") " + currentShip.ssd[numPart].name + ": " + currentShip.ssd[numPart].numOfThisPart);
				
				if (numPart == 21) {
					System.out.print(" [");
					for (int i = 0; i < currentShip.ssd[21].numOfThisPart; i++) {		// Scanner Numbers
						System.out.print(currentShip.damConNums[i] + " ");
					}
					System.out.print("]");
					System.out.println();
				} else if (numPart == 22) {
					System.out.print(" [");
					for (int i = 0; i < currentShip.ssd[22].numOfThisPart; i++) {		// Scanner Numbers
						System.out.print(currentShip.sensorNums[i] + " ");
					}
					System.out.print("]");
					System.out.println();
				} else if (numPart == 23) {
					System.out.print(" [");
					for (int i = 0; i < currentShip.ssd[23].numOfThisPart; i++) {		// Scanner Numbers
						System.out.print(currentShip.scannerNums[i] + " ");
					}
					System.out.print("]");
					System.out.println();
				}
				System.out.println();
			}
			
			System.out.println();
			System.out.println("Is all the above information correct?");
			String correct = Driver.getInputNoCancel("YN");
			
			if (correct.equalsIgnoreCase("N")) {
				System.out.println("What is incorrect: Ship [I]nfo or [S]SD System Number?");
				String whatIsIncorrect = Driver.getInputNoCancel("IS");
				if (whatIsIncorrect.equalsIgnoreCase("S")) {
					ChangeShipSSDSystems(newShipNum);
				} else {
					ChangeShipInfo(newShipNum);
				}
			} else {
				cont = false;
			}
		}
				
		System.out.println();
		ShipSetup.PrintCurrentThingsInGame("Ship", "");
		System.out.println();
	}
	
	public static void ChangeShipSSDSystems(int shipNumInput) {
		int systemNumToChange = 0;
		int newAmount = 0;
		
		while (systemNumToChange != -1) {
			System.out.println();
			System.out.print("System number to change [RETURN to cancel]: ");
			systemNumToChange = Driver.getNumber(0, 24);
			if (systemNumToChange != -1) {
				System.out.print("New number for " + Driver.currentGameYard.list[shipNumInput].ssd[systemNumToChange-1].name + " SSD boxes: ");
				newAmount = Driver.getNumber(0, 24);
				Driver.currentGameYard.list[shipNumInput].ssd[systemNumToChange-1].numOfThisPart = newAmount;
				Driver.currentGameYard.list[shipNumInput].ssd[systemNumToChange-1].remaining = newAmount;
			}
		}
	}
	
	public static void ChangeShipInfo(int newShipNum) {

		Starship currentShip = Driver.currentGameYard.list[newShipNum];
		
		System.out.print("Race (" + currentShip.race + "): ");
		String raceInput = Driver.keyboard.nextLine();
		if (raceInput.length() != 0) {
			currentShip.race = raceInput;
		}
		
		System.out.print("Ship Type (" + currentShip.shipType + "): ");
		String typeInput = Driver.keyboard.nextLine().toUpperCase();
		if (typeInput.length() != 0) {
			currentShip.shipType = typeInput;
		}

		currentShip.name = currentShip.race + "-" + currentShip.shipType;
		System.out.println("Ship Name = " + currentShip.name);

		System.out.print("Crew Units (" + currentShip.crewUnits + "): ");
		String crewInput = Driver.keyboard.nextLine();
		if (crewInput.length() != 0) {
			currentShip.crewUnits = crewInput;
		}

		System.out.print("Boarding Parties (" + currentShip.boardingParties + "): ");
		String boardingInput = Driver.keyboard.nextLine();
		if (boardingInput.length() != 0) {
			currentShip.boardingParties = boardingInput;
		}

		System.out.print("BPV (" + currentShip.BPV + "): ");
		String bpvInput = Driver.keyboard.nextLine();
		if (bpvInput.length() != 0) {
			currentShip.BPV = bpvInput;
		}

		System.out.print("Break Down (" + currentShip.breakDown + "): ");
		String breakInput = Driver.keyboard.nextLine();
		if (breakInput.length() != 0) {
			currentShip.breakDown = breakInput;
		}

		System.out.print("Move Cost (" + currentShip.moveCost + "): ");
		String moveInput = Driver.keyboard.nextLine();
		if (moveInput.length() != 0) {
			currentShip.moveCost = moveInput;
		}

		System.out.print("Spare Shuttles (" + currentShip.spareShuttles + "): ");
		String shuttleInput = Driver.keyboard.nextLine();
		if (shuttleInput.length() != 0) {
			currentShip.spareShuttles = shuttleInput;
		}

		System.out.print("Size Class (" + currentShip.sizeClass + "): ");
		String sizeInput = Driver.keyboard.nextLine();
		if (sizeInput.length() != 0) {
			currentShip.sizeClass = sizeInput;
		}
		
		System.out.print("Turn Mode (" + currentShip.turnMode + "): ");
		String turnInput = Driver.keyboard.nextLine().toUpperCase();
		if (turnInput.length() != 0) {
			currentShip.turnMode = turnInput;
		}
		
		System.out.print("Rule Number (" + currentShip.ruleNum + "): ");
		String ruleInput = Driver.keyboard.nextLine();
		if (ruleInput.length() != 0) {
			currentShip.ruleNum = ruleInput;
		}
		
		System.out.print("Year in Service (" + currentShip.yearInService + "): ");
		String yearInput = Driver.keyboard.nextLine();
		if (yearInput.length() != 0) {
			currentShip.yearInService = yearInput;
		}
		
//		System.out.print("Dock Points:");
//		System.out.print("Explosion Strength:");
		
	}
	
    public static void main() {

        try
        {
            // Save original out stream.
            PrintStream originalOut = System.out;
            // Save original err stream.
            PrintStream originalErr = System.err;

            // Create a new file output stream.
            PrintStream fileOut = new PrintStream("./out.txt");
            // Create a new file error stream. 
            PrintStream fileErr = new PrintStream("./err.txt");

            // Redirect standard out to file.
            System.setOut(fileOut);
            // Redirect standard err to file.
            System.setErr(fileErr);

            // Wrapped Scanner to get user input.
            Scanner scanner = new Scanner(System.in);

            // Print data in command console.
            originalOut.println("Please input your email. ");

            // Read string line.
            String line = scanner.nextLine();

            while(true)
            {
                // If user input 'quit' then break the loop.
                if("quit".equalsIgnoreCase(line))
                {
                    break;
                }

                if(!isValidEmail(line))
                {
                    // If user input is not a valid email then write log data to ./err.txt file and console.
                    originalErr.println("Email " + line + " is not a valid email. Please input again.");
                    System.err.println("Email " + line + " is not a valid email. ");
                }else
                {
                    // If user input a valid email then write the email to ./out.txt and console.
                    originalOut.println("Email " + line + " is valid. Please input another one.");
                    System.out.println("Email " + line + " is valid. Please input another one.");
                }
                // Get next user input line text.
                line = scanner.nextLine();
            }

            originalOut.println("Program exist. ");
            System.out.println("Program exist. ");

            // Do not forget set original output and error stream back again.
            System.setOut(originalOut);
            System.setErr(originalErr);

        }catch(FileNotFoundException ex)
        {
            ex.printStackTrace();
        }
    }

    /* Check whether the string is an email address or not. */
    private static boolean isValidEmail(String email)
    {
        boolean ret = true;

        if(email==null || email.trim().length()==0)
        {
            ret = false;
        }else
        {
            int index = email.indexOf("@");
            if(index == -1)
            {
                ret = false;
            }
        }

        return ret;
    }

}
